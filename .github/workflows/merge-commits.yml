name: Merge commits to next branch

on:
  schedule:
    - cron: "0 */2 * * 1-5" # Cron timezone is in UTC

env:
  TARGET_BRANCH: next
  SOURCE_BRANCH: main
  USERNAME: msfluid-bot
  EMAIL: banana-bot@outlook.com

jobs:
  check-pr:
    runs-on: ubuntu-latest
    if: github.repository_owner == 'microsoft'
    steps:
      - run: npm install @octokit/core
      - name: Check PR exists using octokit
        uses: actions/github-script@d556feaca394842dc55e4734bf3bb9f685482fa0 # ratchet:actions/github-script@v6
        id: check-pr-exists
        with:
          token: ${{ secrets.BOT_MAIN_NEXT_WORKFLOW_PAT }}
          script: |
            const { Octokit } = require("@octokit/core");
            const token = `${{ secrets.GITHUB_TOKEN }}`;
            const octokit = new Octokit({ auth: token });
            const response = await octokit.request('GET /repos/{owner}/{repo}/pulls', {
              owner: 'microsoft',
              repo: 'FluidFramework'
            });
            console.log("data----", response);
            console.log("items----", response.data);
            console.log("length---", response.data.length);
            for(let i=0; i<response.data.length; i++) {
              if(response.data[i].title === 'Automation: Main Next Integrate') {
                return true;
              }
            }
            return false;
    outputs:
      EXISTS: ${{ steps.check-pr-exists.outputs.result }}
  dequeue:
    runs-on: ubuntu-latest
    needs: [check-pr]
    if: needs.check-pr.outputs.EXISTS == 'false'
    steps:
      - run: npm install @azure/storage-queue
      - uses: actions/github-script@d556feaca394842dc55e4734bf3bb9f685482fa0 # ratchet:actions/github-script@v6
        id: dequeue-message
        with:
          script: |
            const { QueueClient, QueueServiceClient } = require('@azure/storage-queue')
            const connectionString = `${{ secrets.AZURE_STORAGE_CONNECTION_STRING }}`;
            const queueName = `${{ secrets.AZURE_QUEUE_NAME }}`;
            const queueServiceClient = QueueServiceClient.fromConnectionString(connectionString);
            const queueClient = queueServiceClient.getQueueClient(queueName);
            // Peek at messages in the queue
            const peekedMessages = await queueClient.peekMessages({ numberOfMessages: 5 });
            let firstMessage;
            for (i = 0; i < peekedMessages.peekedMessageItems.length; i++) {
                // Display the peeked message
                console.log("Peeked message: ", peekedMessages.peekedMessageItems[i].messageText);
                firstMessage = JSON.parse(peekedMessages.peekedMessageItems[i].messageText);
            }
            console.log("sha---", firstMessage.sha);
            console.log("label---", firstMessage.label);
            console.log("author---", firstMessage.author);
            return firstMessage;
    outputs:
      LABEL: ${{ fromJSON(steps.dequeue-message.outputs.result).label }}
      AUTHOR: ${{ fromJSON(steps.dequeue-message.outputs.result).author }}
      SHA: ${{ fromJSON(steps.dequeue-message.outputs.result).sha }}
  create-branch:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      actions: write
      checks: write
      issues: write
      pull-requests: write
      statuses: write
    needs: [dequeue]
    if: (needs.dequeue.result) == 'success'
    steps:
      - name: Git checkout
        if: ${{needs.dequeue.outputs.LABEL}} == 'queued'
        uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c # ratchet:actions/checkout@v3
        with:
          token: ${{ secrets.BOT_MAIN_NEXT_WORKFLOW_PAT }}
          fetch-depth: "0"
      - name: Create branch
        if: ${{needs.dequeue.outputs.LABEL}} == 'queued'
        run: |
          git config user.name $USERNAME
          git config user.email $EMAIL
          git fetch origin
          git checkout $SOURCE_BRANCH
          git checkout -b main-next-${{needs.dequeue.outputs.SHA}}
          git fetch --all
          git reset --hard ${{needs.dequeue.outputs.SHA}}
          git push --set-upstream origin main-next-${{needs.dequeue.outputs.SHA}}
  pull-request:
    runs-on: ubuntu-latest
    concurrency:
      group: group-pr
      cancel-in-progress: false
    needs: [create-branch, dequeue]
    if: needs.create-branch.result == 'success'
    steps:
      - run: npm install @octokit/core
      - name: Create PR using octokit
        uses: actions/github-script@d556feaca394842dc55e4734bf3bb9f685482fa0 # ratchet:actions/github-script@v6
        with:
          token: ${{ secrets.BOT_MAIN_NEXT_WORKFLOW_PAT }}
          script: |
            const { Octokit } = require("@octokit/core");
            const token = `${{ secrets.FLUIDBOTPAT }}`;
            const sha = 'main-next-${{needs.dequeue.outputs.SHA}}';
            const author = '${{needs.dequeue.outputs.AUTHOR}}';
            const description = `
            ## Main-next integrate PR

            The aim of this pull request is to sync main and next branch. The expectation from the assignee is as follows:

            > - Acknowledge the pull request by commenting, "Actively working on it."
            > - Resolve any merge conflicts between this branch and next, and then push the resolution to this branch. Merge next into this branch if necessary. The history of this branch should not be rebased or squashed.
            > - This branch exists across the Microsoft main repository, not across anyone's fork.
            > - There should only be one fix up commit on this branch, named "Automation: Main Next Integrate."
            > - Verify that CI is passing for this PR, fixing any issues. Do not attempt to resolve Real service e2e test or Stress test failures, as they are non-required CI failures.
            > - Once the PR is ready for merging, add a comment @mentioning the reviewers to get it merged. Thank you!

            For more information about how to resolve merge conflicts and CI failures, visit [this wiki page](https://github.com/microsoft/FluidFramework/wiki/Main-next-Automation).

             ### We recommend the following commands while working on this PR:

             Pull this branch locally, and do not work on your forked branch. You will need to work across the Microsoft main repository.

                          git clone https://github.com/microsoft/FluidFramework
                          git fetch
                          git checkout <main-next-****>

            If this is the first commit made by you or someone else, fix any merge conflicts or CI failures as follows:

                          git merge next
                          [Resolve conflicts or known CI failures]
                          git add .
                          git commit -m "Automation: Main Next Integrate"
                          git push

            To add future fix up commits to this PR, use the following commands:

                          [Make desired changes]
                          git add .
                          git commit --amend
                          [Press Esc and then :wq!]
                          git push --force-with-lease
              `;
            const octokit = new Octokit({ auth: token })
            const newPr = await octokit.request('POST /repos/{owner}/{repo}/pulls', {
              owner: 'microsoft',
              repo: 'FluidFramework',
              title: 'Automation: Main Next Integrate',
              body: description,
              head: sha,
              base: 'next'
            });
            await octokit.request('POST /repos/{owner}/{repo}/issues/{issue_number}/assignees', {
              owner: 'microsoft',
              repo: 'FluidFramework',
              issue_number: newPr.data.number,
              assignees: [ author ]
            });
            await octokit.request('POST /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers', {
              owner: 'microsoft',
              repo: 'FluidFramework',
              pull_number: newPr.data.number,
              reviewers: [
                'sonalideshpandemsft',
                'tylerbutler',
                'scottn12',
              ]
            });
            await octokit.request('POST /repos/{owner}/{repo}/issues/{issue_number}/labels', {
              owner: 'microsoft',
              repo: 'FluidFramework',
              issue_number: newPr.data.number,
              labels: [
                'main-next-integrate',
                'do-not-squash-merge',
                'msftbot: merge-next'
              ]
            })
  remove-from-queue:
    runs-on: ubuntu-latest
    concurrency:
      group: group-pr
      cancel-in-progress: false
    needs: [pull-request]
    if: needs.pull-request.result == 'success'
    steps:
      - uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c # ratchet:actions/checkout@v3
      - uses: actions/setup-node@64ed1c7eab4cce3362f8c340dee64e5eaeef8f7c # ratchet:actions/setup-node@v3
        with:
          node-version: 14
      - run: npm ci
      - run: npm install @azure/storage-queue
      - uses: actions/github-script@d556feaca394842dc55e4734bf3bb9f685482fa0 # ratchet:actions/github-script@v6
        with:
          script: |
            const { QueueClient, QueueServiceClient } = require('@azure/storage-queue')
            const connectionString = `${{ secrets.AZURE_STORAGE_CONNECTION_STRING }}`;
            const queueServiceClient = QueueServiceClient.fromConnectionString(connectionString);
            const queueName = `${{ secrets.AZURE_QUEUE_NAME }}`;
            const queueClient = queueServiceClient.getQueueClient(queueName);
            // Get up to 5 messages from the queue
            const receivedMsgsResp = await queueClient.receiveMessages({ numberOfMessages: 5, visibilityTimeout: 5 * 60 });
            for (i = 0; i < receivedMsgsResp.receivedMessageItems.length; i++) {
                message = receivedMsgsResp.receivedMessageItems[i];
                console.log("Dequeuing message: ", message.messageText);
                await queueClient.deleteMessage(message.messageId, message.popReceipt);
            }
